<!DOCTYPE html>
<html lang="en"></html>
<head>
  <%- include('partials/header') %>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Poppy Map</title>
</head>
<body>
  <script async defer type="text/javascript"
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnNY4Px8zfiDo3zWqujXBwJykMyHRoDw8&callback=initMap"></script>
  <div  style="position:absolute;" class="menu">
    <button style="position:absolute; top:2px; left:185px;" class="nav-tgl" type="button" aria-label="toggle menu">
      <!-- this span just for the three dividers in the hamburger button--><span aria-hidden="true"></span>
    </button>
    <nav class="nav">
      <!-- I don't care about the menu elements here so I will hide them-->
      <ul class="navLinks">
        <li><a href="/">Home</a></li>
        <li><a href="/map">Map</a></li>
        <li><a href="/about">About Us</a></li>
        <li><a href="events.ejs">Events</a></li>
        <li><a href="/contact">Map</a></li>
      </ul>
    </nav>
  </div>
    <div id="map"></div>
<style>
    #map {
      height: 100%;
    }
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
  </style>
  <script>
     var x = <%-JSON.stringify(users)%>;
     let addressArray = [];
     let companyArray = [];
     let websiteArray = [];
     let mapArray = [];
    for (var item of x) {
      companyArray.push(item.Company);
      addressArray.push(item.Address + ' , ' + item.City);
      websiteArray.push(item.Website);
      mapArray.push(item.google_map);

    };

    let all = [companyArray, addressArray, websiteArray, mapArray];
    let mix = [];

    for (var i = 0; all.length !== 0; i++) {
    var j = 0;
    while (j < all.length) {
        if (i >= all[j].length) {
            all.splice(j, 1);
        } else {
            mix.push(all[j][i]);
            j += 1;
        }
    }
}

function group3(arr, len) {
     let chunks = [];
     let copy  = arr; // Use a copy to not modifiy the original array
     while(copy.length + 1 > len) {
         chunks.push(copy.splice(0, len));
     }
     return chunks;
}

let locations = group3(mix, 4);

function initMap() {
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 10,
      center: new google.maps.LatLng(39.742043, -104.991531),
      mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  var infowindow = new google.maps.InfoWindow();

  const locationButton = document.createElement("button");
    locationButton.textContent = "Pan to Current Location";
    locationButton.classList.add("btn-sm");
    map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
    locationButton.addEventListener("click", () => {
    // Try HTML5 geolocation.
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          infowindow.setPosition(pos);
          infowindow.setContent("<h3>You are Here</h3>");
          infowindow.open(map);
          map.setCenter(pos);
          createMarker(pos, "<h3>You are Here</h3>");
        },
        () => {
          handleLocationError(true, infowindow, map.getCenter());
        }
      );
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infowindow, map.getCenter());
    }
  });

  function handleLocationError(browserHasGeolocation, infowindow, pos) {
  infowindow.setPosition(pos);
  infowindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation."
    );
    infowindow.open(map);
  }

    var geocoder = new google.maps.Geocoder();

    var marker, i;

    for (i = 0; i < locations.length; i++) {
      geocodeAddress(locations[i]);
    }

  function geocodeAddress(location) {
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode( { 'address': location[1]}, function(results, status) {
    //alert(status);
      if (status == google.maps.GeocoderStatus.OK) {

        //alert(results[0].geometry.location);
        createMarker(results[0].geometry.location,`<h3>${location[0]}</h3>`+location[1]+ '<br>' + `<a href="${location[2]}" target="_blank">${location[2]}</a>` + '<br>' + `<a href="${location[3]}" target="_blank">Get Directions to ${location[0]}</a>`);
      }
      else
      {
        alert("some problem in geocode" + status);
      }
    }); 
  }

function createMarker(latlng,html){    
  var marker = new google.maps.Marker({
    position: latlng,
    map: map,
    icon: '/img/poppy-marker-8-50x50.png',
  }); 

    marker.addListener("click", () => {
      infowindow.setContent(html);
      infowindow.open(map, marker);
    });
  }
}
  </script>
</body>
</html>